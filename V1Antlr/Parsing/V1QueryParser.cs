//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from V1Query.g by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class V1QueryParser : Parser {
	public const int
		SINGLE_QUOTED_STRING=1, DOUBLE_QUOTED_STRING=2, CONTEXT_ASSET=3, VARIABLE_NAME=4, 
		NAME=5, OPEN_PAREN=6, CLOSE_PAREN=7, OPEN_BRACKET=8, CLOSE_BRACKET=9, 
		EQ=10, NE=11, LT=12, LTE=13, GT=14, GTE=15, PLUS=16, MINUS=17, HASH=18, 
		PIPE=19, AMP=20, SEMI=21, COLON=22, COMMA=23, DOT=24, DOT_AT=25;
	public const int
		RULE_attribute_selection_token = 0, RULE_filter2_token = 1, RULE_sort_token = 2, 
		RULE_sort_token_term = 3, RULE_asc_sort_token_term = 4, RULE_desc_sort_token_term = 5, 
		RULE_attribute_definition_token = 6, RULE_asset_type_token = 7, RULE_attribute_name = 8, 
		RULE_aggregation_name = 9, RULE_attribute_name_part = 10, RULE_now_only = 11, 
		RULE_downcast = 12, RULE_attribute_filter = 13, RULE_filter_expression = 14, 
		RULE_grouped_filter_term = 15, RULE_and_operator = 16, RULE_or_operator = 17, 
		RULE_simple_filter_term = 18, RULE_binary_operator = 19, RULE_unary_operator = 20, 
		RULE_variable = 21, RULE_filter_value_list = 22, RULE_filter_value = 23;
	public static readonly string[] ruleNames = {
		"attribute_selection_token", "filter2_token", "sort_token", "sort_token_term", 
		"asc_sort_token_term", "desc_sort_token_term", "attribute_definition_token", 
		"asset_type_token", "attribute_name", "aggregation_name", "attribute_name_part", 
		"now_only", "downcast", "attribute_filter", "filter_expression", "grouped_filter_term", 
		"and_operator", "or_operator", "simple_filter_term", "binary_operator", 
		"unary_operator", "variable", "filter_value_list", "filter_value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'$'", null, null, "'('", "')'", "'['", "']'", "'='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'#'", "'|'", "'&'", 
		"';'", "':'", "','", "'.'", "'.@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", "CONTEXT_ASSET", 
		"VARIABLE_NAME", "NAME", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "EQ", "NE", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
		"HASH", "PIPE", "AMP", "SEMI", "COLON", "COMMA", "DOT", "DOT_AT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "V1Query.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public V1QueryParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Attribute_selection_tokenContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(V1QueryParser.Eof, 0); }
		public Attribute_nameContext[] attribute_name() {
			return GetRuleContexts<Attribute_nameContext>();
		}
		public Attribute_nameContext attribute_name(int i) {
			return GetRuleContext<Attribute_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(V1QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(V1QueryParser.COMMA, i);
		}
		public Attribute_selection_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_selection_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAttribute_selection_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAttribute_selection_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_selection_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_selection_tokenContext attribute_selection_token() {
		Attribute_selection_tokenContext _localctx = new Attribute_selection_tokenContext(Context, State);
		EnterRule(_localctx, 0, RULE_attribute_selection_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.La(1);
			if (_la==NAME) {
				{
				State = 48; attribute_name();
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 49; Match(COMMA);
					State = 50; attribute_name();
					}
					}
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter2_tokenContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(V1QueryParser.Eof, 0); }
		public Filter_expressionContext filter_expression() {
			return GetRuleContext<Filter_expressionContext>(0);
		}
		public Filter2_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter2_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterFilter2_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitFilter2_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter2_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter2_tokenContext filter2_token() {
		Filter2_tokenContext _localctx = new Filter2_tokenContext(Context, State);
		EnterRule(_localctx, 2, RULE_filter2_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << OPEN_PAREN) | (1L << PLUS) | (1L << MINUS))) != 0)) {
				{
				State = 60; filter_expression();
				}
			}

			State = 63; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_tokenContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(V1QueryParser.Eof, 0); }
		public Sort_token_termContext[] sort_token_term() {
			return GetRuleContexts<Sort_token_termContext>();
		}
		public Sort_token_termContext sort_token_term(int i) {
			return GetRuleContext<Sort_token_termContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(V1QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(V1QueryParser.COMMA, i);
		}
		public Sort_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterSort_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitSort_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_tokenContext sort_token() {
		Sort_tokenContext _localctx = new Sort_tokenContext(Context, State);
		EnterRule(_localctx, 4, RULE_sort_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << PLUS) | (1L << MINUS))) != 0)) {
				{
				State = 65; sort_token_term();
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 66; Match(COMMA);
					State = 67; sort_token_term();
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 75; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_token_termContext : ParserRuleContext {
		public Asc_sort_token_termContext asc_sort_token_term() {
			return GetRuleContext<Asc_sort_token_termContext>(0);
		}
		public Desc_sort_token_termContext desc_sort_token_term() {
			return GetRuleContext<Desc_sort_token_termContext>(0);
		}
		public Sort_token_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_token_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterSort_token_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitSort_token_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_token_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_token_termContext sort_token_term() {
		Sort_token_termContext _localctx = new Sort_token_termContext(Context, State);
		EnterRule(_localctx, 6, RULE_sort_token_term);
		try {
			State = 79;
			switch (TokenStream.La(1)) {
			case NAME:
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; asc_sort_token_term();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; desc_sort_token_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asc_sort_token_termContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(V1QueryParser.PLUS, 0); }
		public Asc_sort_token_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asc_sort_token_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAsc_sort_token_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAsc_sort_token_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsc_sort_token_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asc_sort_token_termContext asc_sort_token_term() {
		Asc_sort_token_termContext _localctx = new Asc_sort_token_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_asc_sort_token_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_la = TokenStream.La(1);
			if (_la==PLUS) {
				{
				State = 81; Match(PLUS);
				}
			}

			State = 84; attribute_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Desc_sort_token_termContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(V1QueryParser.MINUS, 0); }
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Desc_sort_token_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc_sort_token_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterDesc_sort_token_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitDesc_sort_token_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc_sort_token_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Desc_sort_token_termContext desc_sort_token_term() {
		Desc_sort_token_termContext _localctx = new Desc_sort_token_termContext(Context, State);
		EnterRule(_localctx, 10, RULE_desc_sort_token_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(MINUS);
			State = 87; attribute_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_definition_tokenContext : ParserRuleContext {
		public Asset_type_tokenContext asset_type_token() {
			return GetRuleContext<Asset_type_tokenContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(V1QueryParser.DOT, 0); }
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(V1QueryParser.Eof, 0); }
		public Attribute_definition_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_definition_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAttribute_definition_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAttribute_definition_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_definition_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_definition_tokenContext attribute_definition_token() {
		Attribute_definition_tokenContext _localctx = new Attribute_definition_tokenContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute_definition_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; asset_type_token();
			State = 90; Match(DOT);
			State = 91; attribute_name();
			State = 92; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asset_type_tokenContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(V1QueryParser.NAME, 0); }
		public Asset_type_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset_type_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAsset_type_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAsset_type_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsset_type_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asset_type_tokenContext asset_type_token() {
		Asset_type_tokenContext _localctx = new Asset_type_tokenContext(Context, State);
		EnterRule(_localctx, 14, RULE_asset_type_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public Attribute_name_partContext[] attribute_name_part() {
			return GetRuleContexts<Attribute_name_partContext>();
		}
		public Attribute_name_partContext attribute_name_part(int i) {
			return GetRuleContext<Attribute_name_partContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(V1QueryParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(V1QueryParser.DOT, i);
		}
		public ITerminalNode DOT_AT() { return GetToken(V1QueryParser.DOT_AT, 0); }
		public Aggregation_nameContext aggregation_name() {
			return GetRuleContext<Aggregation_nameContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_attribute_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; attribute_name_part();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 97; Match(DOT);
				State = 98; attribute_name_part();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 106;
			_la = TokenStream.La(1);
			if (_la==DOT_AT) {
				{
				State = 104; Match(DOT_AT);
				State = 105; aggregation_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregation_nameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(V1QueryParser.NAME, 0); }
		public Aggregation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAggregation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAggregation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregation_nameContext aggregation_name() {
		Aggregation_nameContext _localctx = new Aggregation_nameContext(Context, State);
		EnterRule(_localctx, 18, RULE_aggregation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_name_partContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(V1QueryParser.NAME, 0); }
		public Now_onlyContext now_only() {
			return GetRuleContext<Now_onlyContext>(0);
		}
		public DowncastContext downcast() {
			return GetRuleContext<DowncastContext>(0);
		}
		public Attribute_filterContext attribute_filter() {
			return GetRuleContext<Attribute_filterContext>(0);
		}
		public Attribute_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAttribute_name_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAttribute_name_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_name_partContext attribute_name_part() {
		Attribute_name_partContext _localctx = new Attribute_name_partContext(Context, State);
		EnterRule(_localctx, 20, RULE_attribute_name_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(NAME);
			State = 112;
			_la = TokenStream.La(1);
			if (_la==HASH) {
				{
				State = 111; now_only();
				}
			}

			State = 115;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 114; downcast();
				}
			}

			State = 118;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 117; attribute_filter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Now_onlyContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(V1QueryParser.HASH, 0); }
		public Now_onlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_now_only; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterNow_only(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitNow_only(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNow_only(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Now_onlyContext now_only() {
		Now_onlyContext _localctx = new Now_onlyContext(Context, State);
		EnterRule(_localctx, 22, RULE_now_only);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DowncastContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(V1QueryParser.COLON, 0); }
		public Asset_type_tokenContext asset_type_token() {
			return GetRuleContext<Asset_type_tokenContext>(0);
		}
		public DowncastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_downcast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterDowncast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitDowncast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDowncast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DowncastContext downcast() {
		DowncastContext _localctx = new DowncastContext(Context, State);
		EnterRule(_localctx, 24, RULE_downcast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(COLON);
			State = 123; asset_type_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_filterContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(V1QueryParser.OPEN_BRACKET, 0); }
		public Filter_expressionContext filter_expression() {
			return GetRuleContext<Filter_expressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(V1QueryParser.CLOSE_BRACKET, 0); }
		public Attribute_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAttribute_filter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAttribute_filter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_filter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_filterContext attribute_filter() {
		Attribute_filterContext _localctx = new Attribute_filterContext(Context, State);
		EnterRule(_localctx, 26, RULE_attribute_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(OPEN_BRACKET);
			State = 126; filter_expression();
			State = 127; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_expressionContext : ParserRuleContext {
		public Grouped_filter_termContext[] grouped_filter_term() {
			return GetRuleContexts<Grouped_filter_termContext>();
		}
		public Grouped_filter_termContext grouped_filter_term(int i) {
			return GetRuleContext<Grouped_filter_termContext>(i);
		}
		public Simple_filter_termContext[] simple_filter_term() {
			return GetRuleContexts<Simple_filter_termContext>();
		}
		public Simple_filter_termContext simple_filter_term(int i) {
			return GetRuleContext<Simple_filter_termContext>(i);
		}
		public And_operatorContext[] and_operator() {
			return GetRuleContexts<And_operatorContext>();
		}
		public And_operatorContext and_operator(int i) {
			return GetRuleContext<And_operatorContext>(i);
		}
		public Or_operatorContext[] or_operator() {
			return GetRuleContexts<Or_operatorContext>();
		}
		public Or_operatorContext or_operator(int i) {
			return GetRuleContext<Or_operatorContext>(i);
		}
		public Filter_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterFilter_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitFilter_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_expressionContext filter_expression() {
		Filter_expressionContext _localctx = new Filter_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_filter_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			switch (TokenStream.La(1)) {
			case OPEN_PAREN:
				{
				State = 129; grouped_filter_term();
				}
				break;
			case NAME:
			case PLUS:
			case MINUS:
				{
				State = 130; simple_filter_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PIPE) | (1L << AMP) | (1L << SEMI))) != 0)) {
				{
				{
				State = 135;
				switch (TokenStream.La(1)) {
				case AMP:
				case SEMI:
					{
					State = 133; and_operator();
					}
					break;
				case PIPE:
					{
					State = 134; or_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 139;
				switch (TokenStream.La(1)) {
				case OPEN_PAREN:
					{
					State = 137; grouped_filter_term();
					}
					break;
				case NAME:
				case PLUS:
				case MINUS:
					{
					State = 138; simple_filter_term();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_filter_termContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(V1QueryParser.OPEN_PAREN, 0); }
		public Filter_expressionContext filter_expression() {
			return GetRuleContext<Filter_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(V1QueryParser.CLOSE_PAREN, 0); }
		public Grouped_filter_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_filter_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterGrouped_filter_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitGrouped_filter_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouped_filter_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_filter_termContext grouped_filter_term() {
		Grouped_filter_termContext _localctx = new Grouped_filter_termContext(Context, State);
		EnterRule(_localctx, 30, RULE_grouped_filter_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(OPEN_PAREN);
			State = 147; filter_expression();
			State = 148; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_operatorContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(V1QueryParser.AMP, 0); }
		public ITerminalNode SEMI() { return GetToken(V1QueryParser.SEMI, 0); }
		public And_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterAnd_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitAnd_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_operatorContext and_operator() {
		And_operatorContext _localctx = new And_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_and_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_la = TokenStream.La(1);
			if ( !(_la==AMP || _la==SEMI) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_operatorContext : ParserRuleContext {
		public ITerminalNode PIPE() { return GetToken(V1QueryParser.PIPE, 0); }
		public Or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterOr_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitOr_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_operatorContext or_operator() {
		Or_operatorContext _localctx = new Or_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_filter_termContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public Filter_value_listContext filter_value_list() {
			return GetRuleContext<Filter_value_listContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Simple_filter_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_filter_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterSimple_filter_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitSimple_filter_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_filter_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_filter_termContext simple_filter_term() {
		Simple_filter_termContext _localctx = new Simple_filter_termContext(Context, State);
		EnterRule(_localctx, 36, RULE_simple_filter_term);
		int _la;
		try {
			State = 165;
			switch (TokenStream.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 154; attribute_name();
				State = 160;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NE) | (1L << LT) | (1L << LTE) | (1L << GT) | (1L << GTE))) != 0)) {
					{
					State = 155; binary_operator();
					State = 158;
					switch (TokenStream.La(1)) {
					case SINGLE_QUOTED_STRING:
					case DOUBLE_QUOTED_STRING:
						{
						State = 156; filter_value_list();
						}
						break;
					case CONTEXT_ASSET:
					case VARIABLE_NAME:
						{
						State = 157; variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; unary_operator();
				State = 163; attribute_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(V1QueryParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(V1QueryParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(V1QueryParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(V1QueryParser.LTE, 0); }
		public ITerminalNode GT() { return GetToken(V1QueryParser.GT, 0); }
		public ITerminalNode GTE() { return GetToken(V1QueryParser.GTE, 0); }
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterBinary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitBinary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_binary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NE) | (1L << LT) | (1L << LTE) | (1L << GT) | (1L << GTE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(V1QueryParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(V1QueryParser.MINUS, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			_la = TokenStream.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE_NAME() { return GetToken(V1QueryParser.VARIABLE_NAME, 0); }
		public ITerminalNode CONTEXT_ASSET() { return GetToken(V1QueryParser.CONTEXT_ASSET, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 42, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.La(1);
			if ( !(_la==CONTEXT_ASSET || _la==VARIABLE_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_value_listContext : ParserRuleContext {
		public Filter_valueContext[] filter_value() {
			return GetRuleContexts<Filter_valueContext>();
		}
		public Filter_valueContext filter_value(int i) {
			return GetRuleContext<Filter_valueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(V1QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(V1QueryParser.COMMA, i);
		}
		public Filter_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_value_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterFilter_value_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitFilter_value_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_value_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_value_listContext filter_value_list() {
		Filter_value_listContext _localctx = new Filter_value_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_filter_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; filter_value();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 174; Match(COMMA);
				State = 175; filter_value();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_valueContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(V1QueryParser.SINGLE_QUOTED_STRING, 0); }
		public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(V1QueryParser.DOUBLE_QUOTED_STRING, 0); }
		public Filter_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.EnterFilter_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IV1QueryListener typedListener = listener as IV1QueryListener;
			if (typedListener != null) typedListener.ExitFilter_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IV1QueryVisitor<TResult> typedVisitor = visitor as IV1QueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_valueContext filter_value() {
		Filter_valueContext _localctx = new Filter_valueContext(Context, State);
		EnterRule(_localctx, 46, RULE_filter_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_la = TokenStream.La(1);
			if ( !(_la==SINGLE_QUOTED_STRING || _la==DOUBLE_QUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1B\xBA\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2\x3\x2"+
		"\a\x2\x36\n\x2\f\x2\xE\x2\x39\v\x2\x5\x2;\n\x2\x3\x2\x3\x2\x3\x3\x5\x3"+
		"@\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4G\n\x4\f\x4\xE\x4J\v\x4\x5\x4"+
		"L\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5R\n\x5\x3\x6\x5\x6U\n\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\a"+
		"\n\x66\n\n\f\n\xE\ni\v\n\x3\n\x3\n\x5\nm\n\n\x3\v\x3\v\x3\f\x3\f\x5\f"+
		"s\n\f\x3\f\x5\fv\n\f\x3\f\x5\fy\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\x86\n\x10\x3\x10\x3\x10\x5\x10"+
		"\x8A\n\x10\x3\x10\x3\x10\x5\x10\x8E\n\x10\a\x10\x90\n\x10\f\x10\xE\x10"+
		"\x93\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\xA1\n\x14\x5\x14\xA3\n\x14\x3\x14\x3"+
		"\x14\x3\x14\x5\x14\xA8\n\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\a\x18\xB3\n\x18\f\x18\xE\x18\xB6\v\x18\x3\x19\x3"+
		"\x19\x3\x19\x2\x2\x1A\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E"+
		" \"$&(*,.\x30\x2\a\x3\x2\x16\x17\x3\x2\f\x11\x3\x2\x12\x13\x3\x2\x5\x6"+
		"\x3\x2\x3\x4\xB5\x2:\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6K\x3\x2\x2\x2\bQ\x3"+
		"\x2\x2\x2\nT\x3\x2\x2\x2\fX\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10`\x3\x2\x2"+
		"\x2\x12\x62\x3\x2\x2\x2\x14n\x3\x2\x2\x2\x16p\x3\x2\x2\x2\x18z\x3\x2\x2"+
		"\x2\x1A|\x3\x2\x2\x2\x1C\x7F\x3\x2\x2\x2\x1E\x85\x3\x2\x2\x2 \x94\x3\x2"+
		"\x2\x2\"\x98\x3\x2\x2\x2$\x9A\x3\x2\x2\x2&\xA7\x3\x2\x2\x2(\xA9\x3\x2"+
		"\x2\x2*\xAB\x3\x2\x2\x2,\xAD\x3\x2\x2\x2.\xAF\x3\x2\x2\x2\x30\xB7\x3\x2"+
		"\x2\x2\x32\x37\x5\x12\n\x2\x33\x34\a\x19\x2\x2\x34\x36\x5\x12\n\x2\x35"+
		"\x33\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2"+
		"\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:\x32\x3\x2\x2\x2:;\x3\x2\x2"+
		"\x2;<\x3\x2\x2\x2<=\a\x2\x2\x3=\x3\x3\x2\x2\x2>@\x5\x1E\x10\x2?>\x3\x2"+
		"\x2\x2?@\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x42\a\x2\x2\x3\x42\x5\x3\x2"+
		"\x2\x2\x43H\x5\b\x5\x2\x44\x45\a\x19\x2\x2\x45G\x5\b\x5\x2\x46\x44\x3"+
		"\x2\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IL\x3\x2\x2\x2J"+
		"H\x3\x2\x2\x2K\x43\x3\x2\x2\x2KL\x3\x2\x2\x2LM\x3\x2\x2\x2MN\a\x2\x2\x3"+
		"N\a\x3\x2\x2\x2OR\x5\n\x6\x2PR\x5\f\a\x2QO\x3\x2\x2\x2QP\x3\x2\x2\x2R"+
		"\t\x3\x2\x2\x2SU\a\x12\x2\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2UV\x3\x2\x2\x2"+
		"VW\x5\x12\n\x2W\v\x3\x2\x2\x2XY\a\x13\x2\x2YZ\x5\x12\n\x2Z\r\x3\x2\x2"+
		"\x2[\\\x5\x10\t\x2\\]\a\x1A\x2\x2]^\x5\x12\n\x2^_\a\x2\x2\x3_\xF\x3\x2"+
		"\x2\x2`\x61\a\a\x2\x2\x61\x11\x3\x2\x2\x2\x62g\x5\x16\f\x2\x63\x64\a\x1A"+
		"\x2\x2\x64\x66\x5\x16\f\x2\x65\x63\x3\x2\x2\x2\x66i\x3\x2\x2\x2g\x65\x3"+
		"\x2\x2\x2gh\x3\x2\x2\x2hl\x3\x2\x2\x2ig\x3\x2\x2\x2jk\a\x1B\x2\x2km\x5"+
		"\x14\v\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2m\x13\x3\x2\x2\x2no\a\a\x2\x2o\x15"+
		"\x3\x2\x2\x2pr\a\a\x2\x2qs\x5\x18\r\x2rq\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3"+
		"\x2\x2\x2tv\x5\x1A\xE\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2vx\x3\x2\x2\x2wy\x5"+
		"\x1C\xF\x2xw\x3\x2\x2\x2xy\x3\x2\x2\x2y\x17\x3\x2\x2\x2z{\a\x14\x2\x2"+
		"{\x19\x3\x2\x2\x2|}\a\x18\x2\x2}~\x5\x10\t\x2~\x1B\x3\x2\x2\x2\x7F\x80"+
		"\a\n\x2\x2\x80\x81\x5\x1E\x10\x2\x81\x82\a\v\x2\x2\x82\x1D\x3\x2\x2\x2"+
		"\x83\x86\x5 \x11\x2\x84\x86\x5&\x14\x2\x85\x83\x3\x2\x2\x2\x85\x84\x3"+
		"\x2\x2\x2\x86\x91\x3\x2\x2\x2\x87\x8A\x5\"\x12\x2\x88\x8A\x5$\x13\x2\x89"+
		"\x87\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x8E\x5 \x11"+
		"\x2\x8C\x8E\x5&\x14\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8C\x3\x2\x2\x2\x8E\x90"+
		"\x3\x2\x2\x2\x8F\x89\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2"+
		"\x2\x91\x92\x3\x2\x2\x2\x92\x1F\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x95"+
		"\a\b\x2\x2\x95\x96\x5\x1E\x10\x2\x96\x97\a\t\x2\x2\x97!\x3\x2\x2\x2\x98"+
		"\x99\t\x2\x2\x2\x99#\x3\x2\x2\x2\x9A\x9B\a\x15\x2\x2\x9B%\x3\x2\x2\x2"+
		"\x9C\xA2\x5\x12\n\x2\x9D\xA0\x5(\x15\x2\x9E\xA1\x5.\x18\x2\x9F\xA1\x5"+
		",\x17\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2"+
		"\x9D\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA8\x3\x2\x2\x2\xA4\xA5\x5*\x16"+
		"\x2\xA5\xA6\x5\x12\n\x2\xA6\xA8\x3\x2\x2\x2\xA7\x9C\x3\x2\x2\x2\xA7\xA4"+
		"\x3\x2\x2\x2\xA8\'\x3\x2\x2\x2\xA9\xAA\t\x3\x2\x2\xAA)\x3\x2\x2\x2\xAB"+
		"\xAC\t\x4\x2\x2\xAC+\x3\x2\x2\x2\xAD\xAE\t\x5\x2\x2\xAE-\x3\x2\x2\x2\xAF"+
		"\xB4\x5\x30\x19\x2\xB0\xB1\a\x19\x2\x2\xB1\xB3\x5\x30\x19\x2\xB2\xB0\x3"+
		"\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2"+
		"\xB5/\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7\xB8\t\x6\x2\x2\xB8\x31\x3\x2"+
		"\x2\x2\x16\x37:?HKQTglrux\x85\x89\x8D\x91\xA0\xA2\xA7\xB4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
